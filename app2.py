# app2.py
import streamlit as st
import pandas as pd

st.set_page_config(page_title="–ù–∞–ª–æ–≥–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä 2.1", page_icon="üìä", layout="centered")

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
LIMIT_SNR_MONTH = 1_300_000       # –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –°–ù–† (~1.3M)
LIMIT_SNR_YEAR = 16_000_000       # –≥–æ–¥–æ–≤–æ–π –ª–∏–º–∏—Ç –¥–ª—è –°–ù–† (~16M) - –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ
# (–≤ –∫–æ–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–∞ –ª–∏–º–∏—Ç–∞; –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∑–∞–∫–æ–Ω–æ–≤ –ø–æ–ø—Ä–∞–≤—å –∑–Ω–∞—á–µ–Ω–∏—è)

# —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥)
RATE_OPV = 0.10         # –û–ü–í (—É–¥–µ—Ä–∂–∞–Ω–∏–µ —Å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞)
RATE_OSMS_EMP = 0.02    # –û–°–ú–° (—É–¥–µ—Ä–∂–∞–Ω–∏–µ —Å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞)
RATE_IPN = 0.10         # –ò–ü–ù (—É—Å–ª–æ–≤–Ω–æ 10% –æ—Ç –±–∞–∑—ã)
RATE_SO = 0.035         # –°–û (–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è)
RATE_OSMS_ER = 0.03     # –û–°–ú–° (—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è)
RATE_SOC_TAX = 0.095    # –°–æ—Ü–∏–∞–ª—å–Ω—ã–π –Ω–∞–ª–æ–≥ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
RATE_OS_NS = 0.005      # –û–° –ù–° (0.5% –∫–∞–∫ –ø—Ä–∏–º–µ—Ä)

# –Ω–∞–ª–æ–≥–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏ —Ä–µ–∂–∏–º–æ–≤
RATE_SNR = 0.04
RATE_IP_GENERAL = 0.10
RATE_TOO_KPN = 0.20

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def to_annual(value, period_choice):
    """–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –≤ –≥–æ–¥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–∏–æ–¥–∞."""
    try:
        if period_choice == "–í –º–µ—Å—è—Ü":
            return value * 12
        else:
            return value
    except:
        return 0.0

def money(x):
    return f"{x:,.2f} ‚Ç∏"

def calc_salary_items(salaries_annual):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —É–¥–µ—Ä–∂–∞–Ω–∏–π (employee) –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π (employer) –∏ —Å—É–º–º–∞—Ä–Ω—ã–µ —Å—É–º–º—ã.
       Important: IPN - —É–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –Ω–µ –≤–∫–ª—é—á–∞–µ–º –≤ –Ω–∞–ª–æ–≥ –∫–æ–º–ø–∞–Ω–∏–∏, –Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º."""
    emp = {}
    er = {}
    emp["–û–ü–í (10%)"] = salaries_annual * RATE_OPV
    emp["–û–°–ú–° (—É–¥–µ—Ä–∂–∞–Ω–∏–µ, 2%)"] = salaries_annual * RATE_OSMS_EMP
    # –Ω–∞–ª–æ–≥ –Ω–∞ –¥–æ—Ö–æ–¥—ã —Ñ–∏–∑–ª–∏—Ü (—É–¥–µ—Ä–∂–∞–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ)
    taxable_base_for_ipn = max(0.0, salaries_annual - emp["–û–ü–í (10%)"] - emp["–û–°–ú–° (—É–¥–µ—Ä–∂–∞–Ω–∏–µ, 2%)"])
    emp["–ò–ü–ù (10% –æ—Ç –±–∞–∑—ã)"] = taxable_base_for_ipn * RATE_IPN

    er["–°–û (3.5%)"] = salaries_annual * RATE_SO
    er["–û–°–ú–° (—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å, 3%)"] = salaries_annual * RATE_OSMS_ER
    er["–°–æ—Ü–Ω–∞–ª–æ–≥ (9.5%)"] = salaries_annual * RATE_SOC_TAX
    er["–û–° –ù–° (0.5%)"] = salaries_annual * RATE_OS_NS

    emp_total = sum(emp.values())
    er_total = sum(er.values())
    return emp, er, emp_total, er_total

def compute_mode_tax(mode_key, income_annual, salaries_annual, expenses_considered, amortization_annual):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –Ω–∞–ª–æ–≥ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ä–µ–∂–∏–º—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (mode_tax, taxable_base, warnings)."""
    warnings = []
    taxable_base = 0.0
    mode_tax = 0.0

    if mode_key == "snr_individual":
        # –°–ù–† –¥–ª—è —Ñ–∏–∑–ª–∏—Ü–∞ (—Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–π)
        if salaries_annual > 0:
            warnings.append("‚ö†Ô∏è –°–ù–† –Ω–µ–ø—Ä–∏–º–µ–Ω–∏–º –¥–ª—è —Ñ–∏–∑–ª–∏—Ü–∞ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏.")
        if income_annual / 12 > LIMIT_SNR_MONTH:
            warnings.append("‚ö†Ô∏è –î–æ—Ö–æ–¥ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –°–ù–† (~1.3M).")
        if income_annual > LIMIT_SNR_YEAR:
            warnings.append("‚ö†Ô∏è –î–æ—Ö–æ–¥ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≥–æ–¥–æ–≤–æ–π –ª–∏–º–∏—Ç –°–ù–† (~16M).")
        mode_tax = income_annual * RATE_SNR
        taxable_base = income_annual  # for display purpose

    elif mode_key == "snr_ip_too_kh":
        if income_annual / 12 > LIMIT_SNR_MONTH:
            warnings.append("‚ö†Ô∏è –î–æ—Ö–æ–¥ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –°–ù–† (~1.3M).")
        if income_annual > LIMIT_SNR_YEAR:
            warnings.append("‚ö†Ô∏è –î–æ—Ö–æ–¥ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≥–æ–¥–æ–≤–æ–π –ª–∏–º–∏—Ç –°–ù–† (~16M).")
        mode_tax = income_annual * RATE_SNR
        taxable_base = income_annual

    elif mode_key == "general_ip":
        # –ø—Ä–∏–±—ã–ª—å = –¥–æ—Ö–æ–¥ - —Ä–∞—Å—Ö–æ–¥—ã_considered - salaries - amortization
        profit = income_annual - expenses_considered - salaries_annual - amortization_annual
        taxable_base = max(0.0, profit)
        if profit <= 0:
            mode_tax = 0.0
            warnings.append("‚ö†Ô∏è –ü—Ä–∏–±—ã–ª—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –∏–ª–∏ –Ω—É–ª–µ–≤–∞—è ‚Äî –Ω–∞–ª–æ–≥ –Ω–∞ –ø—Ä–∏–±—ã–ª—å = 0.")
        else:
            mode_tax = profit * RATE_IP_GENERAL

    elif mode_key == "general_too":
        profit = income_annual - expenses_considered - salaries_annual - amortization_annual
        taxable_base = max(0.0, profit)
        if profit <= 0:
            mode_tax = 0.0
            warnings.append("‚ö†Ô∏è –ü—Ä–∏–±—ã–ª—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –∏–ª–∏ –Ω—É–ª–µ–≤–∞—è ‚Äî –ö–ü–ù = 0.")
        else:
            mode_tax = profit * RATE_TOO_KPN

    else:
        mode_tax = 0.0
        taxable_base = 0.0

    return mode_tax, taxable_base, warnings

# --- Streamlit UI ---
def main():
    st.title("üìä –ù–∞–ª–æ–≥–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è")
    st.markdown(
        "–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç –Ω–∞–ª–æ–≥–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏. "
        "–ü–æ–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤ ‚Äî –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ: –±—É—Ö–≥–∞–ª—Ç–µ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å, –∫–∞–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã —É—á–∏—Ç—ã–≤–∞—Ç—å –∫–∞–∫ –≤—ã—á–µ—Ç—ã. "
        "IPN —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ —É–¥–µ—Ä–∂–∞–Ω–∏–µ (–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ), –Ω–æ **–Ω–µ** –≤–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –Ω–∞–ª–æ–≥–æ–≤—É—é –Ω–∞–≥—Ä—É–∑–∫—É –∫–æ–º–ø–∞–Ω–∏–∏."
    )

    st.header("üîπ –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö")
    col1, col2 = st.columns([1, 1])

    with col1:
        entity_choice = st.selectbox("–ö—Ç–æ –≤—ã?", ["–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ (individual)", "–ò–ü", "TOO / –ö–æ–º–ø–∞–Ω–∏—è", "–ö—Ä–µ—Å—Ç—å—è–Ω—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ (–ö–•)"])
        entity_map = {
            "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ (individual)": "individual",
            "–ò–ü": "ip",
            "TOO / –ö–æ–º–ø–∞–Ω–∏—è": "too",
            "–ö—Ä–µ—Å—Ç—å—è–Ω—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ (–ö–•)": "kh"
        }
        entity = entity_map[entity_choice]

        has_employees = st.radio("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏?", ["–ù–µ—Ç", "–î–∞"]) == "–î–∞"

        period_choice = st.radio("–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã–µ?", ["–í –º–µ—Å—è—Ü", "–í –≥–æ–¥"])

    with col2:
        income = st.number_input("–í–≤–µ–¥–∏—Ç–µ –¥–æ—Ö–æ–¥:", min_value=0.0, step=1000.0, format="%.2f", value=0.0)
        salaries = st.number_input("–í–≤–µ–¥–∏—Ç–µ —Ñ–æ–Ω–¥ –∑–∞—Ä–ø–ª–∞—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥:", min_value=0.0, step=1000.0, format="%.2f", value=0.0) if (entity in ["ip", "too", "kh"] or has_employees) else 0.0
        amortization = st.number_input("–í–≤–µ–¥–∏—Ç–µ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—é (–ø–µ—Ä–µ—á–µ–Ω—å/—Å—É–º–º–∞):", min_value=0.0, step=100.0, format="%.2f", value=0.0) if (entity in ["ip", "too", "kh"] or has_employees) else 0.0

    st.markdown("---")
    st.subheader("üìã –†–∞—Å—Ö–æ–¥—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ ‚Äî –±—É—Ö–≥–∞–ª—Ç–µ—Ä –æ—Ç–º–µ—á–∞–µ—Ç, —á—Ç–æ —É—á–∏—Ç—ã–≤–∞—Ç—å)")

    # Expense categories with checkboxes
    exp_cols = st.columns(3)
    with exp_cols[0]:
        use_rent = st.checkbox("–£—á–∏—Ç—ã–≤–∞—Ç—å –∞—Ä–µ–Ω–¥—É?", value=True)
        rent = st.number_input("–ê—Ä–µ–Ω–¥–∞:", min_value=0.0, step=100.0, format="%.2f", value=0.0) if use_rent else 0.0
    with exp_cols[1]:
        use_materials = st.checkbox("–£—á–∏—Ç—ã–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã?", value=True)
        materials = st.number_input("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:", min_value=0.0, step=100.0, format="%.2f", value=0.0) if use_materials else 0.0
    with exp_cols[2]:
        use_services = st.checkbox("–£—á–∏—Ç—ã–≤–∞—Ç—å —É—Å–ª—É–≥–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤?", value=True)
        services = st.number_input("–£—Å–ª—É–≥–∏:", min_value=0.0, step=100.0, format="%.2f", value=0.0) if use_services else 0.0

    exp_cols2 = st.columns(3)
    with exp_cols2[0]:
        use_travel = st.checkbox("–£—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ?", value=False)
        travel = st.number_input("–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ:", min_value=0.0, step=100.0, format="%.2f", value=0.0) if use_travel else 0.0
    with exp_cols2[1]:
        use_interest = st.checkbox("–£—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º?", value=False)
        interest = st.number_input("–ü—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º:", min_value=0.0, step=100.0, format="%.2f", value=0.0) if use_interest else 0.0
    with exp_cols2[2]:
        use_other = st.checkbox("–£—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã?", value=False)
        other = st.number_input("–ü—Ä–æ—á–∏–µ:", min_value=0.0, step=100.0, format="%.2f", value=0.0) if use_other else 0.0

    # always show explicit "—à—Ç—Ä–∞—Ñ—ã –∏ –ø–µ–Ω–∏" but disabled by default and warn
    st.caption("‚ö†Ô∏è –®—Ç—Ä–∞—Ñ—ã –∏ –ø–µ–Ω–∏ –æ–±—ã—á–Ω–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –∫ –≤—ã—á–µ—Ç—É.")
    use_penalties = st.checkbox("–ï—Å—Ç—å —à—Ç—Ä–∞—Ñ—ã/–ø–µ–Ω–∏ (–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å, –Ω–æ –Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å)?", value=False)
    penalties = st.number_input("–®—Ç—Ä–∞—Ñ—ã/–ø–µ–Ω–∏ (—É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏):", min_value=0.0, step=100.0, format="%.2f", value=0.0) if use_penalties else 0.0

    st.markdown("---")

    # Choose mode(s) available (we will compute all and then mark availability)
    st.subheader("üîß –†–µ–∂–∏–º –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è (–≤—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞)")
    modes_user = st.multiselect("–û—Ç–º–µ—Ç—å—Ç–µ —Ä–µ–∂–∏–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —Å—Ä–∞–≤–Ω–∏—Ç—å (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
                                ["–°–ù–† ‚Äî —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–µ (4%)", "–°–ù–† ‚Äî —É–ø—Ä–æ—â—ë–Ω–∫–∞/—Ä–æ–∑–Ω–∏—Ü–∞ (4%)",
                                 "–û–±—â–∏–π —Ä–µ–∂–∏–º ‚Äî –ò–ü (10%)", "–û–±—â–∏–π —Ä–µ–∂–∏–º ‚Äî –¢–û–û (–ö–ü–ù 20%)"],
                                default=["–°–ù–† ‚Äî —É–ø—Ä–æ—â—ë–Ω–∫–∞/—Ä–æ–∑–Ω–∏—Ü–∞ (4%)", "–û–±—â–∏–π —Ä–µ–∂–∏–º ‚Äî –¢–û–û (–ö–ü–ù 20%)"])
    # Map to internal keys
    mode_map = {
        "–°–ù–† ‚Äî —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–µ (4%)": "snr_individual",
        "–°–ù–† ‚Äî —É–ø—Ä–æ—â—ë–Ω–∫–∞/—Ä–æ–∑–Ω–∏—Ü–∞ (4%)": "snr_ip_too_kh",
        "–û–±—â–∏–π —Ä–µ–∂–∏–º ‚Äî –ò–ü (10%)": "general_ip",
        "–û–±—â–∏–π —Ä–µ–∂–∏–º ‚Äî –¢–û–û (–ö–ü–ù 20%)": "general_too"
    }
    selected_modes = [mode_map[m] for m in modes_user]

    # ACTION: Calculate (button)
    if st.button("üîé –†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):
        # --- –ü–µ—Ä–µ—Å—á—ë—Ç –≤ –≥–æ–¥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ---
        income_annual = to_annual(income, period_choice)
        salaries_annual = to_annual(salaries, period_choice)
        amortization_annual = to_annual(amortization, period_choice)

        # Build expenses_considered based on checkboxes
        expenses_components = {}
        if use_rent:
            expenses_components["–ê—Ä–µ–Ω–¥–∞"] = to_annual(rent, period_choice)
        if use_materials:
            expenses_components["–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"] = to_annual(materials, period_choice)
        if use_services:
            expenses_components["–£—Å–ª—É–≥–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤"] = to_annual(services, period_choice)
        if use_travel:
            expenses_components["–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ"] = to_annual(travel, period_choice)
        if use_interest:
            expenses_components["–ü—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º"] = to_annual(interest, period_choice)
        if use_other:
            expenses_components["–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"] = to_annual(other, period_choice)
        # penalties shown but not included
        expenses_sum = sum(expenses_components.values())

        # salary items
        emp_items, er_items, emp_total, er_total = calc_salary_items(salaries_annual)

        # For each mode compute taxes (we compute all to compare)
        results = []
        mode_infos = {}
        for mk in ["snr_individual", "snr_ip_too_kh", "general_ip", "general_too"]:
            mode_tax, taxable_base, warnings = compute_mode_tax(mk, income_annual, salaries_annual, expenses_sum, amortization_annual)
            # company_total_tax: include ONLY employer contributions + mode_tax (do not include IPN)
            company_total_tax = mode_tax + er_total
            # company_total_liability_for_display: also optionally show employee withholdings separately
            mode_infos[mk] = {
                "mode_tax": mode_tax,
                "taxable_base": taxable_base,
                "warnings": warnings,
                "company_total_tax": company_total_tax,
                "employee_withholdings_total": emp_total,
                "employer_contributions_total": er_total
            }

        # Build display: choose which modes to show (those user selected)
        display_results = []
        for mk in selected_modes:
            info = mode_infos[mk]
            # availability check for SNR:
            available = True
            reason = ""
            if mk in ("snr_individual", "snr_ip_too_kh"):
                if income_annual / 12 > LIMIT_SNR_MONTH:
                    available = False
                    reason = f"–¥–æ—Ö–æ–¥ (–≤ –º–µ—Å.) {income_annual/12:,.2f} ‚Ç∏ > –ª–∏–º–∏—Ç {LIMIT_SNR_MONTH:,.2f} ‚Ç∏"
                if income_annual > LIMIT_SNR_YEAR:
                    available = False
                    reason = f"–¥–æ—Ö–æ–¥ (–≤ –≥–æ–¥.) {income_annual:,.2f} ‚Ç∏ > –ª–∏–º–∏—Ç {LIMIT_SNR_YEAR:,.2f} ‚Ç∏"
                if mk == "snr_individual" and salaries_annual > 0:
                    available = False
                    reason = "–≤ —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã—Ö –Ω–µ–ª—å–∑—è –∏–º–µ—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
            # for general modes, typically available
            display_results.append((mk, info, available, reason))

        # --- Primary result: show detailed breakdown for chosen primary mode (first in selected_modes) ---
        primary = selected_modes[0] if selected_modes else None
        if primary is None:
            st.error("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ–∂–∏–º –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞.")
            st.stop()

        info = mode_infos[primary]
        # Company tax (exclude IPN), employee withholdings shown separately
        company_tax = info["company_total_tax"]
        emp_with = info["employee_withholdings_total"]
        er_contrib = info["employer_contributions_total"]
        mode_tax = info["mode_tax"]
        taxable_base = info["taxable_base"]
        warnings = info["warnings"]

        # Compute net income after taxes for company perspective:
        # note: Net = income - expenses_sum - salaries - amortization - company_tax
        net_after_taxes = income_annual - expenses_sum - salaries_annual - amortization_annual - company_tax

        # Output top metrics
        st.header("üìå –†–µ–∑—É–ª—å—Ç–∞—Ç")
        col_a, col_b = st.columns(2)
        col_a.metric("–°–æ–≤–æ–∫—É–ø–Ω—ã–π –Ω–∞–ª–æ–≥ (–¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏)", money(company_tax))
        col_b.metric("–î–æ—Ö–æ–¥ –ø–æ—Å–ª–µ –Ω–∞–ª–æ–≥–æ–≤ (–¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏)", money(net_after_taxes))

        # Show immediate warnings
        for w in warnings:
            st.warning(w)

        # Detailed breakdown: Deductions -> Tax base -> Taxes -> Contributions
        st.subheader("üîç –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ (–ø–æ—à–∞–≥–æ–≤–æ)")

        # DEDUCTIONS block (visible)
        ded_rows = []
        ded_rows.append(("–î–æ—Ö–æ–¥ (–≤–∞–ª–æ–≤–æ–π)", money(income_annual)))
        ded_rows.append(("–í—ã—á–µ—Ç—ã: —Ñ–æ–Ω–¥ –∑–∞—Ä–ø–ª–∞—Ç—ã (–§–û–¢)", money(salaries_annual)))
        # list expense components
        for k, v in expenses_components.items():
            ded_rows.append((f"–í—ã—á–µ—Ç—ã: {k}", money(v)))
        ded_rows.append(("–í—ã—á–µ—Ç—ã: –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è", money(amortization_annual)))
        ded_rows.append(("–ò—Ç–æ–≥–æ –≤—ã—á–µ—Ç—ã (–∑–∞—Ä–ø–ª–∞—Ç—ã + —Ä–∞—Å—Ö–æ–¥—ã + –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è)", money(salaries_annual + expenses_sum + amortization_annual)))
        # taxable base (for profit taxes)
        if primary in ("general_ip", "general_too"):
            ded_rows.append(("–ù–∞–ª–æ–≥–æ–æ–±–ª–∞–≥–∞–µ–º–∞—è –±–∞–∑–∞ (–ø—Ä–∏–±—ã–ª—å)", money(taxable_base)))
        else:
            ded_rows.append(("–ù–∞–ª–æ–≥–æ–æ–±–ª–∞–≥–∞–µ–º–∞—è –±–∞–∑–∞ (–¥–ª—è —Ä–µ–∂–∏–º–∞)", money(taxable_base)))

        df_ded = pd.DataFrame(ded_rows, columns=["–ü–æ–∑–∏—Ü–∏—è", "–°—É–º–º–∞"])
        st.table(df_ded)

        # Salary-related items (two groups: —É–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è)
        st.subheader("üßæ –£–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ)")
        emp_list = [(k, money(v)) for k, v in emp_items.items()]
        df_emp = pd.DataFrame(emp_list, columns=["–£–¥–µ—Ä–∂–∞–Ω–∏–µ (—Å–æ—Ç—Ä—É–¥–Ω–∏–∫)", "–°—É–º–º–∞"])
        st.table(df_emp)
        st.caption("–ò–ü–ù —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –ø–µ—Ä–µ—á–∏—Å–ª—è–µ—Ç—Å—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–º, –Ω–æ –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –Ω–∞–ª–æ–≥–æ–≤—É—é –Ω–∞–≥—Ä—É–∑–∫—É –∫–æ–º–ø–∞–Ω–∏–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏).")

        st.subheader("üè¢ –ù–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è (–Ω–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏)")
        er_list = [(k, money(v)) for k, v in er_items.items()]
        df_er = pd.DataFrame(er_list, columns=["–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ (—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å)", "–°—É–º–º–∞"])
        st.table(df_er)

        # Mode tax and company totals
        st.subheader("üí∏ –ù–∞–ª–æ–≥–∏ –ø–æ —Ä–µ–∂–∏–º—É –∏ –∏—Ç–æ–≥–æ–≤—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞")
        main_rows = []
        main_rows.append(("–ù–∞–ª–æ–≥ –ø–æ —Ä–µ–∂–∏–º—É", money(mode_tax)))
        main_rows.append(("–ù–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è (–∏—Ç–æ–≥–æ)", money(er_contrib)))
        main_rows.append(("–°–æ–≤–æ–∫—É–ø–Ω–∞—è —Å—É–º–º–∞ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ (–∫–æ–º–ø–∞–Ω–∏—è)", money(company_tax)))
        main_rows.append(("–£–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–∏—Ç–æ–≥–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ)", money(emp_with)))
        df_main = pd.DataFrame(main_rows, columns=["–ü–æ–∑–∏—Ü–∏—è", "–°—É–º–º–∞"])
        st.table(df_main)

        # Consistency check
        st.subheader("üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏")
        calc_net = income_annual - (salaries_annual + expenses_sum + amortization_annual + company_tax)
        st.write(f"–ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥ (–ø—Ä–æ–≤–µ—Ä–∫–∞) = –î–æ—Ö–æ–¥ - (–§–û–¢ + —Ä–∞—Å—Ö–æ–¥—ã + –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è + –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏) = {money(calc_net)}")
        if abs(calc_net - net_after_taxes) > 1e-6:
            st.error("–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è—Ö! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.")

        # Recommendations and comparison
        st.subheader("üí° –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        # Build results table for user-selected modes
        comp_rows = []
        for mk, info, available, reason in display_results:
            comp_company_tax = info["company_total_tax"]
            comp_emp_with = info["employee_withholdings_total"]
            comp_er = info["employer_contributions_total"]
            comp_taxable = info["taxable_base"]
            comp_net = income_annual - (salaries_annual + expenses_sum + amortization_annual + comp_company_tax)
            status = "–î–æ—Å—Ç—É–ø–µ–Ω" if available else f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({reason})" if reason else "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            comp_rows.append({
                "–†–µ–∂–∏–º": mk,
                "–°—Ç–∞—Ç—É—Å": status,
                "–ù–∞–ª–æ–≥ (–∫–æ–º–ø–∞–Ω–∏—è)": comp_company_tax,
                "–ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥ (–∫–æ–º–ø–∞–Ω–∏—è)": comp_net
            })

        df_comp = pd.DataFrame(comp_rows)
        # Format money in dataframe for display
        df_comp["–ù–∞–ª–æ–≥ (–∫–æ–º–ø–∞–Ω–∏—è)"] = df_comp["–ù–∞–ª–æ–≥ (–∫–æ–º–ø–∞–Ω–∏—è)"].apply(money)
        df_comp["–ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥ (–∫–æ–º–ø–∞–Ω–∏—è)"] = df_comp["–ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥ (–∫–æ–º–ø–∞–Ω–∏—è)"].apply(money)
        st.table(df_comp)

        # Recommendations textual (always show)
        # Determine best by minimal company tax among available modes
        available_modes_list = [r for r in comp_rows if r["–°—Ç–∞—Ç—É—Å"].startswith("–î–æ—Å—Ç—É–ø–µ–Ω")]
        if available_modes_list:
            best_by_tax = min(available_modes_list, key=lambda x: x["–ù–∞–ª–æ–≥ (–∫–æ–º–ø–∞–Ω–∏—è)"])
            # but note columns currently strings; rebuild to numeric selection
            best = min(available_modes_list, key=lambda x: x["–ù–∞–ª–æ–≥ (–∫–æ–º–ø–∞–Ω–∏—è)"])
            # Actually we need numeric comparisons -> recompute quick
            best_idx = None
            best_tax_num = None
            for i, r in enumerate(comp_rows):
                if r["–°—Ç–∞—Ç—É—Å"] == "–î–æ—Å—Ç—É–ø–µ–Ω":
                    taxn = r["–ù–∞–ª–æ–≥ (–∫–æ–º–ø–∞–Ω–∏—è)"]
                    # numeric from money string not needed if we use info earlier - simpler:
                    pass
            # Build using mode_infos numeric
            best_mode = None
            best_tax_val = None
            best_net_val = None
            for mk, info, available, reason in display_results:
                if available:
                    val = info["company_total_tax"]
                    netv = income_annual - (salaries_annual + expenses_sum + amortization_annual + val)
                    if best_mode is None or val < best_tax_val:
                        best_mode = mk
                        best_tax_val = val
                        best_net_val = netv
            if best_mode:
                st.success(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–ª–æ–≥–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ —É —Ä–µ–∂–∏–º–∞ ¬´{best_mode}¬ª ‚Äî –Ω–∞–ª–æ–≥ ‚âà {money(best_tax_val)}, —á–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥ ‚âà {money(best_net_val)}.")
        else:
            st.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ (–ø–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º). –ü–æ–∫–∞–∑–∞–Ω—ã —Ä–∞—Å—á—ë—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ‚Äî —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥—Ä—É–≥–æ–π —Ä–µ–∂–∏–º –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∏–∑–Ω–µ—Å–∞.")

        # Provide targeted tips: where you can reduce tax
        st.subheader("üõ†Ô∏è –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Å–Ω–∏–∂–µ–Ω–∏—é –Ω–∞–ª–æ–≥–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏")
        # Tip: check amortization
        # compute impact of excluding amortization (if considered)
        if amortization_annual > 0 and primary in ("general_ip", "general_too"):
            # recompute profit without amortization
            _, base_with_amort, _ = compute_mode_tax(primary, income_annual, salaries_annual, expenses_sum, amortization_annual)
            tax_with_amort = mode_infos[primary]["mode_tax"]
            _, base_no_amort, _ = compute_mode_tax(primary, income_annual, salaries_annual, expenses_sum, 0.0)
            tax_no_amort = 0.0
            if primary in ("general_ip"):
                tax_no_amort = max(0.0, base_no_amort * RATE_IP_GENERAL)
            elif primary in ("general_too"):
                tax_no_amort = max(0.0, base_no_amort * RATE_TOO_KPN)
            diff = tax_with_amort - tax_no_amort
            st.info(f"–£—á—ë—Ç –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏ —Å–Ω–∏–∂–∞–µ—Ç –Ω–∞–ª–æ–≥ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ä–µ–∂–∏–º—É –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ {money(diff)} (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ—Ä–º—ã –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã).")

        # Tip: expenses categories
        st.markdown("**–°–æ–≤–µ—Ç:** —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø–µ—Ä–≤–∏—á–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (—Å—á–µ—Ç–∞, –∞–∫—Ç—ã, –¥–æ–≥–æ–≤–æ—Ä—ã) –¥–ª—è —Ç–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—á–∏—Ç—ã–≤–∞—Ç—å ‚Äî –Ω–∞–ª–æ–≥–æ–≤–∞—è –º–æ–∂–µ—Ç –æ—Ç–∫–∞–∑–∞—Ç—å –≤ –≤—ã—á–µ—Ç–µ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π.")

        st.balloons()

if __name__ == "__main__":
    main()

