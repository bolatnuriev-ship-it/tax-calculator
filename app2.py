# app2.py
import streamlit as st
import pandas as pd

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
LIMIT_SNR_MONTH = 1_300_000       # –ª–∏–º–∏—Ç –≤ –º–µ—Å—è—Ü –¥–ª—è –°–ù–† (~300 –ú–†–ü)
LIMIT_SNR_YEAR = 2_500_000_000    # –ª–∏–º–∏—Ç –≤ –≥–æ–¥ –¥–ª—è –°–ù–†

# --- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ ---
def calculate_deductions(salaries):
    """–†–∞—Å—á—ë—Ç —É–¥–µ—Ä–∂–∞–Ω–∏–π –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º"""
    deductions = {}
    
    # --- –£–¥–µ—Ä–∂–∞–Ω–∏—è —Å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ ---
    deductions["–û–ü–í (10%)"] = salaries * 0.10
    deductions["–û–°–ú–° (2%)"] = salaries * 0.02
    taxable_base = salaries - deductions["–û–ü–í (10%)"] - deductions["–û–°–ú–° (2%)"]
    deductions["–ò–ü–ù (10% –æ—Ç –±–∞–∑—ã)"] = taxable_base * 0.10

    # --- –ù–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è ---
    deductions["–°–û (3.5%)"] = salaries * 0.035
    deductions["–û–°–ú–° —Ä–∞–±. (3%)"] = salaries * 0.03
    deductions["–°–æ—Ü–Ω–∞–ª–æ–≥ (9.5%)"] = salaries * 0.095
    deductions["–û–° –ù–° (0.5%)"] = salaries * 0.005

    total = sum(deductions.values())
    return deductions, total


def calculate_taxes(entity, mode, income_year, salaries_year, expenses_year, amortization):
    """–†–∞—Å—á—ë—Ç –Ω–∞–ª–æ–≥–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ä–µ–∂–∏–º—É —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö —É–¥–µ—Ä–∂–∞–Ω–∏–π"""
    details = {}
    warnings = []

    # --- –£–¥–µ—Ä–∂–∞–Ω–∏—è –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è ---
    salary_deductions, salary_total = calculate_deductions(salaries_year)
    details.update(salary_deductions)

    # --- –ë–∞–∑–∞ –¥–ª—è –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏ ---
    profit_base = income_year - expenses_year - amortization - salaries_year

    # --- –†–µ–∂–∏–º—ã ---
    if mode == "snr_individual":
        if salaries_year > 0:
            warnings.append("‚ö†Ô∏è –°–ù–† –Ω–µ–ø—Ä–∏–º–µ–Ω–∏–º –¥–ª—è —Ñ–∏–∑–ª–∏—Ü–∞ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏.")
        if income_year / 12 > LIMIT_SNR_MONTH:
            warnings.append("‚ö†Ô∏è –î–æ—Ö–æ–¥ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –¥–ª—è –°–ù–† (~1,3 –º–ª–Ω ‚Ç∏ –≤ –º–µ—Å—è—Ü).")
        if income_year > LIMIT_SNR_YEAR:
            warnings.append("‚ö†Ô∏è –î–æ—Ö–æ–¥ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –¥–ª—è –°–ù–† (2,5 –º–ª—Ä–¥ ‚Ç∏ –≤ –≥–æ–¥).")
        tax = income_year * 0.04
        details["–ï–¥–∏–Ω—ã–π –Ω–∞–ª–æ–≥ (4%)"] = tax
        total_tax = tax

    elif mode == "snr_ip_too_kh":
        if income_year / 12 > LIMIT_SNR_MONTH:
            warnings.append("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!!! –î–æ—Ö–æ–¥ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –¥–ª—è –°–ù–† (~1,3 –º–ª–Ω ‚Ç∏ –≤ –º–µ—Å—è—Ü).")
        if income_year > LIMIT_SNR_YEAR:
            warnings.append("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!!! –î–æ—Ö–æ–¥ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –¥–ª—è –°–ù–† (2,5 –º–ª—Ä–¥ ‚Ç∏ –≤ –≥–æ–¥).")
        tax = income_year * 0.04
        details["–ï–¥–∏–Ω—ã–π –Ω–∞–ª–æ–≥ (4%)"] = tax
        total_tax = tax + salary_total

    elif mode == "general_ip":
        if profit_base <= 0:
            profit_tax = 0
            warnings.append("‚ö†Ô∏è –£ –≤–∞—Å —É–±—ã—Ç–æ–∫, –Ω–∞–ª–æ–≥ –Ω–∞ –ø—Ä–∏–±—ã–ª—å –Ω–µ –≤–∑–∏–º–∞–µ—Ç—Å—è.")
        else:
            profit_tax = profit_base * 0.10
        details["–ù–∞–ª–æ–≥ –Ω–∞ –ø—Ä–∏–±—ã–ª—å (10%)"] = profit_tax
        total_tax = profit_tax + salary_total

    elif mode == "general_too":
        if profit_base <= 0:
            profit_tax = 0
            warnings.append("‚ö†Ô∏è –£ –≤–∞—Å —É–±—ã—Ç–æ–∫, –Ω–∞–ª–æ–≥ –Ω–∞ –ø—Ä–∏–±—ã–ª—å –Ω–µ –≤–∑–∏–º–∞–µ—Ç—Å—è.")
        else:
            profit_tax = profit_base * 0.20
        details["–ö–ü–ù (20%)"] = profit_tax
        total_tax = profit_tax + salary_total

    else:
        total_tax, details = 0, {}

    after_tax_income = income_year - total_tax - expenses_year - salaries_year - amortization
    return total_tax, after_tax_income, details, warnings


# --- Streamlit UI ---
def main():
    st.set_page_config(page_title="–ù–∞–ª–æ–≥–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä 2.0", page_icon="üìä", layout="centered")

    st.title("üìä –ù–∞–ª–æ–≥–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω 2.0")
    st.markdown("–†–∞—Å—á—ë—Ç –Ω–∞–ª–æ–≥–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –≤—Å–µ—Ö —É–¥–µ—Ä–∂–∞–Ω–∏–π –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π.")

    # --- –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö ---
    st.header("üîπ –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö")

    entity_choice = st.radio(
        "–ö—Ç–æ –≤—ã?",
        ["–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ (individual)", "–ò–ü", "–¢–û–û / –ö–æ–º–ø–∞–Ω–∏—è", "–ö—Ä–µ—Å—Ç—å—è–Ω—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ (–ö–•)"]
    )

    entity_map = {
        "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ (individual)": "individual",
        "–ò–ü": "ip",
        "–¢–û–û / –ö–æ–º–ø–∞–Ω–∏—è": "too",
        "–ö—Ä–µ—Å—Ç—å—è–Ω—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ (–ö–•)": "kh"
    }
    entity = entity_map[entity_choice]

    has_employees = st.radio("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏?", ["–ù–µ—Ç", "–î–∞"]) == "–î–∞"

    income = st.number_input("–í–≤–µ–¥–∏—Ç–µ –¥–æ—Ö–æ–¥:", min_value=0.0, step=1000.0, format="%.2f")
    salaries, expenses, amortization = 0, 0, 0
    if entity in ["ip", "too"] or has_employees:
        salaries = st.number_input("–í–≤–µ–¥–∏—Ç–µ —Ñ–æ–Ω–¥ –∑–∞—Ä–ø–ª–∞—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥:", min_value=0.0, step=1000.0, format="%.2f")
        expenses = st.number_input("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã (–∫—Ä–æ–º–µ –∑–∞—Ä–ø–ª–∞—Ç):", min_value=0.0, step=1000.0, format="%.2f")
        amortization = st.number_input("–í–≤–µ–¥–∏—Ç–µ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—é:", min_value=0.0, step=1000.0, format="%.2f")

    period_choice = st.radio("–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã–µ?", ["–í –º–µ—Å—è—Ü", "–í –≥–æ–¥"])

    # --- –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã ---
    available_modes = []
    if entity == "individual":
        if not has_employees:
            available_modes.append(("–°–ù–† ‚Äî —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–µ (4%)", "snr_individual"))
    elif entity in ["ip", "too", "kh"]:
        available_modes.append(("–°–ù–† ‚Äî —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π/—Ä–æ–∑–Ω–∏—á–Ω—ã–π (4%)", "snr_ip_too_kh"))
        if entity == "ip":
            available_modes.append(("–û–±—â–∏–π —Ä–µ–∂–∏–º ‚Äî –ò–ü (10%)", "general_ip"))
        elif entity == "too":
            available_modes.append(("–û–±—â–∏–π —Ä–µ–∂–∏–º ‚Äî –¢–û–û (–ö–ü–ù 20%)", "general_too"))

    if not available_modes:
        st.error("‚ö†Ô∏è –î–ª—è –≤–∞—à–µ–≥–æ —Ç–∏–ø–∞ –∏ —É—Å–ª–æ–≤–∏–π –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤.")
        st.stop()

    mode_desc = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ª–æ–≥–æ–≤—ã–π —Ä–µ–∂–∏–º:", [desc for desc, _ in available_modes])
    mode_key = dict(available_modes)[mode_desc]

    if st.button("üîé –†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):
        # –ü–µ—Ä–µ—Å—á—ë—Ç –≤ –≥–æ–¥
        if period_choice == "–í –º–µ—Å—è—Ü":
            income *= 12
            salaries *= 12
            expenses *= 12
            amortization *= 12

        total_tax, after_tax_income, details, warnings = calculate_taxes(entity, mode_key, income, salaries, expenses, amortization)

        st.header("üìå –†–µ–∑—É–ª—å—Ç–∞—Ç")
        col1, col2 = st.columns(2)
        col1.metric("–°–æ–≤–æ–∫—É–ø–Ω—ã–π –Ω–∞–ª–æ–≥", f"{total_tax:,.2f} ‚Ç∏")
        col2.metric("–î–æ—Ö–æ–¥ –ø–æ—Å–ª–µ –Ω–∞–ª–æ–≥–æ–≤", f"{after_tax_income:,.2f} ‚Ç∏")

        st.subheader("üìä –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è")
        df = pd.DataFrame(list(details.items()), columns=["–ü–ª–∞—Ç—ë–∂", "–°—É–º–º–∞, ‚Ç∏"])
        st.table(df)

        for w in warnings:
            st.warning(w)


if __name__ == "__main__":
    main()
