# app.py
import streamlit as st
import pandas as pd

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
LIMIT_SNR_MONTH = 1_300_000       # –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –°–ù–† (‚âà300 –ú–†–ü)
LIMIT_SNR_YEAR = 2_500_000_000    # –≥–æ–¥–æ–≤–æ–π –ª–∏–º–∏—Ç –¥–ª—è –°–ù–† (~2.5 –º–ª—Ä–¥ —Ç–≥)


# --- –§—É–Ω–∫—Ü–∏–∏ ---
def calculate_taxes(entity, mode, income_year, salaries_year, expenses_year):
    """–†–∞—Å—á—ë—Ç –Ω–∞–ª–æ–≥–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ä–µ–∂–∏–º—É"""
    tax = 0
    warnings = []
    after_tax_income = income_year

    if mode == "snr_individual":
        if salaries_year > 0:
            warnings.append("‚ö†Ô∏è –°–ù–† –Ω–µ–ø—Ä–∏–º–µ–Ω–∏–º –¥–ª—è —Ñ–∏–∑–ª–∏—Ü–∞ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏.")
        if income_year / 12 > LIMIT_SNR_MONTH:
            warnings.append("‚ö†Ô∏è –î–æ—Ö–æ–¥ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –¥–ª—è –°–ù–† (~1,3 –º–ª–Ω ‚Ç∏ –≤ –º–µ—Å—è—Ü).")
        if income_year > LIMIT_SNR_YEAR:
            warnings.append("‚ö†Ô∏è –î–æ—Ö–æ–¥ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –¥–ª—è –°–ù–† (2,5 –º–ª—Ä–¥ ‚Ç∏ –≤ –≥–æ–¥).")
        tax = income_year * 0.04
        after_tax_income = income_year - tax

    elif mode == "snr_ip_too_kh":
        if income_year / 12 > LIMIT_SNR_MONTH:
            warnings.append("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!!! –î–æ—Ö–æ–¥ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –¥–ª—è –°–ù–† (~1,3 –º–ª–Ω ‚Ç∏ –≤ –º–µ—Å—è—Ü).")
        if income_year > LIMIT_SNR_YEAR:
            warnings.append("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!!! –î–æ—Ö–æ–¥ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –¥–ª—è –°–ù–† (2,5 –º–ª—Ä–¥ ‚Ç∏ –≤ –≥–æ–¥).")
        tax = income_year * 0.04
        after_tax_income = income_year - tax - salaries_year

    elif mode == "general_ip":
        profit = income_year - expenses_year - salaries_year
        if profit <= 0:
            tax = 0
            warnings.append("‚ö†Ô∏è –£ –≤–∞—Å —É–±—ã—Ç–æ–∫, –Ω–∞–ª–æ–≥ –Ω–∞ –ø—Ä–∏–±—ã–ª—å –Ω–µ –≤–∑–∏–º–∞–µ—Ç—Å—è.")
        else:
            tax = profit * 0.10
        after_tax_income = income_year - expenses_year - salaries_year - tax

    elif mode == "general_too":
        profit = income_year - expenses_year - salaries_year
        if profit <= 0:
            tax = 0
            warnings.append("‚ö†Ô∏è –£ –≤–∞—Å —É–±—ã—Ç–æ–∫, –Ω–∞–ª–æ–≥ –Ω–∞ –ø—Ä–∏–±—ã–ª—å –Ω–µ –≤–∑–∏–º–∞–µ—Ç—Å—è.")
        else:
            tax = profit * 0.20
        after_tax_income = income_year - expenses_year - salaries_year - tax

    return tax, after_tax_income, warnings


# --- Streamlit UI ---
def main():
    st.set_page_config(page_title="–ù–∞–ª–æ–≥–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", page_icon="üìä", layout="centered")

    st.title("üìä –ù–∞–ª–æ–≥–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω")
    st.markdown("–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö.")

    # --- –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö ---
    st.header("üîπ –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö")

    entity_choice = st.radio(
        "–ö—Ç–æ –≤—ã?",
        ["–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ (individual)", "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å (–ò–ü)", 
         "–¢–û–û / –ö–æ–º–ø–∞–Ω–∏—è", "–ö—Ä–µ—Å—Ç—å—è–Ω—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ (–ö–•)"]
    )

    entity_map = {
        "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ (individual)": "individual",
        "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å (–ò–ü)": "ip",
        "–¢–û–û / –ö–æ–º–ø–∞–Ω–∏—è": "too",
        "–ö—Ä–µ—Å—Ç—å—è–Ω—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ (–ö–•)": "kh"
    }
    entity = entity_map[entity_choice]

    has_employees = st.radio("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –Ω–∞—ë–º–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏?", ["–ù–µ—Ç", "–î–∞"]) == "–î–∞"

    income = st.number_input("–í–≤–µ–¥–∏—Ç–µ –¥–æ—Ö–æ–¥:", min_value=0.0, step=1000.0, format="%.2f")

    salaries, expenses = 0, 0
    if entity in ["ip", "too"] or has_employees:
        salaries = st.number_input("–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É –∑–∞—Ä–ø–ª–∞—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥:", min_value=0.0, step=1000.0, format="%.2f")
        expenses = st.number_input("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥:", min_value=0.0, step=1000.0, format="%.2f")

    period_choice = st.radio("–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ?", ["–í –º–µ—Å—è—Ü", "–í –≥–æ–¥"])

    if st.button("üîé –†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):
        # --- –ü–µ—Ä–µ—Å—á—ë—Ç –≤ –≥–æ–¥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è ---
        if period_choice == "–í –º–µ—Å—è—Ü":
            income *= 12
            salaries *= 12
            expenses *= 12

        # --- –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã ---
        available_modes = []
        if entity == "individual":
            if not has_employees:
                available_modes.append(("–°–ù–† ‚Äî –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –Ω–∞–ª–æ–≥–æ–≤—ã–π —Ä–µ–∂–∏–º (—Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–µ, 4%)", "snr_individual"))
        elif entity in ["ip", "too", "kh"]:
            available_modes.append(("–°–ù–† ‚Äî –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –Ω–∞–ª–æ–≥–æ–≤—ã–π —Ä–µ–∂–∏–º (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π/—Ä–æ–∑–Ω–∏—á–Ω—ã–π, 4%)", "snr_ip_too_kh"))
            if entity == "ip":
                available_modes.append(("–û–±—â–∏–π —Ä–µ–∂–∏–º ‚Äî –ò–ü (–Ω–∞–ª–æ–≥ –Ω–∞ –ø—Ä–∏–±—ã–ª—å 10%)", "general_ip"))
            elif entity == "too":
                available_modes.append(("–û–±—â–∏–π —Ä–µ–∂–∏–º ‚Äî –¢–û–û (–ö–ü–ù 20%)", "general_too"))

        # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –°–ù–† –ø–æ –ª–∏–º–∏—Ç—É
        if income > LIMIT_SNR_YEAR:
            available_modes = [m for m in available_modes if not m[1].startswith("snr")]

        if not available_modes:
            st.error("‚ö†Ô∏è –î–ª—è –≤–∞—à–µ–≥–æ —Ç–∏–ø–∞ –∏ –¥–æ—Ö–æ–¥–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤.")
            return

        # –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
        mode_desc = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ª–æ–≥–æ–≤—ã–π —Ä–µ–∂–∏–º:", [desc for desc, _ in available_modes])
        mode_key = dict(available_modes)[mode_desc]

        # --- –†–∞—Å—á—ë—Ç ---
        tax, after_tax_income, warnings = calculate_taxes(entity, mode_key, income, salaries, expenses)

        st.header("üìå –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á—ë—Ç–∞")

        col1, col2 = st.columns(2)
        col1.metric("–ù–∞–ª–æ–≥", f"{tax:,.2f} ‚Ç∏")
        col2.metric("–î–æ—Ö–æ–¥ –ø–æ—Å–ª–µ –Ω–∞–ª–æ–≥–æ–≤", f"{after_tax_income:,.2f} ‚Ç∏")

        for w in warnings:
            st.warning(w)

        # --- –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ---
        if len(available_modes) > 1:
            st.subheader("üí° –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ —á–∏—Å—Ç–æ–≥–æ –¥–æ—Ö–æ–¥–∞")

            results = []
            for desc, alt_mode in available_modes:
                alt_tax, alt_after, _ = calculate_taxes(entity, alt_mode, income, salaries, expenses)
                results.append({"–†–µ–∂–∏–º": desc, "–ù–∞–ª–æ–≥ (‚Ç∏)": alt_tax, "–ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥ (‚Ç∏)": alt_after})

            df = pd.DataFrame(results)

            st.markdown("**–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤ –ø–æ —Ä–µ–∂–∏–º–∞–º:**")
            st.bar_chart(df.set_index("–†–µ–∂–∏–º")["–ù–∞–ª–æ–≥ (‚Ç∏)"])

            st.markdown("**–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –ø–æ —Ä–µ–∂–∏–º–∞–º:**")
            st.bar_chart(df.set_index("–†–µ–∂–∏–º")["–ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥ (‚Ç∏)"])

            # —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
            for row in results:
                if row["–†–µ–∂–∏–º"] != mode_desc and row["–ù–∞–ª–æ–≥ (‚Ç∏)"] < tax:
                    st.info(f"üëâ –ü–æ —Ä–µ–∂–∏–º—É ¬´{row['–†–µ–∂–∏–º']}¬ª –Ω–∞–ª–æ–≥ –±—ã–ª –±—ã –º–µ–Ω—å—à–µ: **{row['–ù–∞–ª–æ–≥ (‚Ç∏)']:,.2f} ‚Ç∏**")
                if row["–†–µ–∂–∏–º"] != mode_desc and row["–ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥ (‚Ç∏)"] > after_tax_income:
                    st.success(f"üí∞ –ü–æ —Ä–µ–∂–∏–º—É ¬´{row['–†–µ–∂–∏–º']}¬ª —á–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥ –±—ã–ª –±—ã –±–æ–ª—å—à–µ: **{row['–ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥ (‚Ç∏)']:,.2f} ‚Ç∏**")


if __name__ == "__main__":
    main()
